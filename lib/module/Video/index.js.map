{"version":3,"sources":["index.tsx"],"names":["NativeModules","NativeEventEmitter","Platform","uuidv4","VideoCompressEventEmitter","VideoCompressor","NativeVideoCompressor","backgroundUpload","url","fileUrl","options","onProgress","uuid","subscription","addListener","event","data","written","total","OS","includes","replace","result","upload","method","httpMethod","headers","removeSubscription","cancelCompression","cancellationId","Video","compress","progress","modifiedOptions","bitrate","compressionMethod","maxSize","minimumFileSizeForCompress","undefined","getCancellationId","activateBackgroundTask","onExpired","deactivateBackgroundTask","removeAllListeners"],"mappings":"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","sourcesContent":["import { NativeModules, NativeEventEmitter, Platform } from 'react-native';\nimport { uuidv4 } from '../utils';\n\nexport declare enum FileSystemUploadType {\n  BINARY_CONTENT = 0,\n  MULTIPART = 1,\n}\n\nexport declare type FileSystemAcceptedUploadHttpMethod =\n  | 'POST'\n  | 'PUT'\n  | 'PATCH';\nexport type compressionMethod = 'auto' | 'manual';\ntype videoCompresssionType = {\n  bitrate?: number;\n  maxSize?: number;\n  compressionMethod?: compressionMethod;\n  minimumFileSizeForCompress?: number;\n  getCancellationId?: (cancellationId: string) => void;\n};\n\nexport declare enum FileSystemSessionType {\n  BACKGROUND = 0,\n  FOREGROUND = 1,\n}\n\nexport declare type HTTPResponse = {\n  status: number;\n  headers: Record<string, string>;\n  body: string;\n};\n\nexport declare type FileSystemUploadOptions = (\n  | {\n      uploadType?: FileSystemUploadType.BINARY_CONTENT;\n    }\n  | {\n      uploadType: FileSystemUploadType.MULTIPART;\n      fieldName?: string;\n      mimeType?: string;\n      parameters?: Record<string, string>;\n    }\n) & {\n  headers?: Record<string, string>;\n  httpMethod?: FileSystemAcceptedUploadHttpMethod;\n  sessionType?: FileSystemSessionType;\n};\n\nexport type VideoCompressorType = {\n  compress(\n    fileUrl: string,\n    options?: videoCompresssionType,\n    onProgress?: (progress: number) => void\n  ): Promise<string>;\n  cancelCompression(cancellationId: string): void;\n  backgroundUpload(\n    url: string,\n    fileUrl: string,\n    options: FileSystemUploadOptions,\n    onProgress?: (writtem: number, total: number) => void\n  ): Promise<any>;\n  activateBackgroundTask(onExpired?: (data: any) => void): Promise<any>;\n  deactivateBackgroundTask(): Promise<any>;\n};\n\nconst VideoCompressEventEmitter = new NativeEventEmitter(\n  NativeModules.VideoCompressor\n);\n\nconst NativeVideoCompressor = NativeModules.VideoCompressor;\n\nexport const backgroundUpload = async (\n  url: string,\n  fileUrl: string,\n  options: FileSystemUploadOptions,\n  onProgress?: (writtem: number, total: number) => void\n): Promise<any> => {\n  const uuid = uuidv4();\n  let subscription = null;\n  try {\n    if (onProgress) {\n      subscription = VideoCompressEventEmitter.addListener(\n        'VideoCompressorProgress',\n        (event: any) => {\n          if (event.uuid === uuid) {\n            onProgress(event.data.written, event.data.total);\n          }\n        }\n      );\n    }\n    if (Platform.OS === 'android' && fileUrl.includes('file://')) {\n      fileUrl = fileUrl.replace('file://', '');\n    }\n    const result = await NativeVideoCompressor.upload(fileUrl, {\n      uuid,\n      method: options.httpMethod,\n      headers: options.headers,\n      url,\n    });\n    return result;\n  } finally {\n    if (subscription) {\n      VideoCompressEventEmitter.removeSubscription(subscription);\n    }\n  }\n};\n\nexport const cancelCompression = (cancellationId: string) => {\n  return NativeVideoCompressor.cancelCompression(cancellationId);\n};\n\nconst Video: VideoCompressorType = {\n  compress: async (\n    fileUrl: string,\n    options?: videoCompresssionType,\n    onProgress?: (progress: number) => void\n  ) => {\n    const uuid = uuidv4();\n    let subscription = null;\n    try {\n      if (onProgress) {\n        subscription = VideoCompressEventEmitter.addListener(\n          'videoCompressProgress',\n          (event: any) => {\n            if (event.uuid === uuid) {\n              onProgress(event.data.progress);\n            }\n          }\n        );\n      }\n      const modifiedOptions: {\n        uuid: string;\n        bitrate?: number;\n        compressionMethod?: compressionMethod;\n        maxSize?: number;\n        minimumFileSizeForCompress?: number;\n      } = { uuid };\n      if (options?.bitrate) modifiedOptions.bitrate = options?.bitrate;\n      if (options?.compressionMethod) {\n        modifiedOptions.compressionMethod = options?.compressionMethod;\n      } else {\n        modifiedOptions.compressionMethod = 'manual';\n      }\n      if (options?.maxSize) {\n        modifiedOptions.maxSize = options?.maxSize;\n      } else {\n        modifiedOptions.maxSize = 640;\n      }\n      if (options?.minimumFileSizeForCompress !== undefined) {\n        modifiedOptions.minimumFileSizeForCompress =\n          options?.minimumFileSizeForCompress;\n      }\n      if (options?.getCancellationId) {\n        options?.getCancellationId(uuid);\n      }\n      const result = await NativeVideoCompressor.compress(\n        fileUrl,\n        modifiedOptions\n      );\n      return result;\n    } finally {\n      if (subscription) {\n        VideoCompressEventEmitter.removeSubscription(subscription);\n      }\n    }\n  },\n  backgroundUpload: backgroundUpload,\n  cancelCompression,\n  activateBackgroundTask(onExpired?) {\n    if (onExpired) {\n      const subscription = VideoCompressEventEmitter.addListener(\n        'backgroundTaskExpired',\n        (event: any) => {\n          onExpired(event);\n          VideoCompressEventEmitter.removeSubscription(subscription);\n        }\n      );\n    }\n    return NativeVideoCompressor.activateBackgroundTask({});\n  },\n  deactivateBackgroundTask() {\n    VideoCompressEventEmitter.removeAllListeners('backgroundTaskExpired');\n    return NativeVideoCompressor.deactivateBackgroundTask({});\n  },\n} as VideoCompressorType;\n\nexport default Video;\n"]}